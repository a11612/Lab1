/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * Copyright (c) 2019 STMicroelectronics International N.V. 
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without 
  * modification, are permitted, provided that the following conditions are met:
  *
  * 1. Redistribution of source code must retain the above copyright notice, 
  *    this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  *    this list of conditions and the following disclaimer in the documentation
  *    and/or other materials provided with the distribution.
  * 3. Neither the name of STMicroelectronics nor the names of other 
  *    contributors to this software may be used to endorse or promote products 
  *    derived from this software without specific written permission.
  * 4. This software, including modifications and/or derivative works of this 
  *    software, must execute solely and exclusively on microcontroller or
  *    microprocessor devices manufactured by or for STMicroelectronics.
  * 5. Redistribution and use of this software other than as permitted under 
  *    this license is void and will automatically terminate your rights under 
  *    this license. 
  *
  * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"
#include "stm32f4xx_hal.h"
#include "usb_device.h"
#include "stdio.h"
#include "stdarg.h"
#include "stdbool.h"
#include <usbd_cdc_if.h>
#include "adc.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */     
#include "../../BSP/STM32F411E-Discovery/stm32f411e_discovery_accelerometer.h"  //faz include das lib do acelerometro
#include <PID_v1.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int16_t adc_value;


double Setpoint, Input, Output;
PidType* myPID;
FloatType myPIDInput; // * Pointers to the Input, Output, and Setpoint variables
FloatType myPIDOutput; //   This creates a hard link between the variables and the
FloatType myPIDSetpoint; //   PID, freeing the user from having to constantly tell us
FloatType Kp=5, Ki=2, Kd=3;

bool entrou=false;

enum
  {
  	PERIPHERAL_USART,	// UART serial device
  	PERIPHERAL_USB 		// USB serial device
  };

/* USER CODE END PTD */
void peripheralPrintf(uint16_t peripheral, char *format, ...);
/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */


 xQueueHandle hQueueAcc;

osThreadId AccReadHandle;
osThreadId TempReadHandle;

/* USER CODE END Variables */
osThreadId defaultTaskHandle;


/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void StartAccRead(void const * argument);
void StartTempRead(void const * argument);
/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void const * argument);

extern void MX_USB_DEVICE_Init(void);
void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
*/
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* definition and creation of accRead */
  osThreadDef(AccRead, StartAccRead, osPriorityNormal, 0, 128);
  AccReadHandle = osThreadCreate(osThread(AccRead), NULL);

  osThreadDef(TempRead, StartTempRead, osPriorityNormal, 0, 128);
  TempReadHandle = osThreadCreate(osThread(TempRead), NULL);
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_QUEUES */
  hQueueAcc=xQueueCreate(5, sizeof(uint8_t)); //fila-memoria de comunicação entre thread do Acc e do Temp
  /* add queues, ... */


  PID_init(myPID,Kp,Ki,Kd, PID_Direction_Direct);
  PID_SetMode(myPID, PID_Mode_Automatic);

  //init ao sensor temp

  /* USER CODE END RTOS_QUEUES */
}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();

  BSP_ACCELERO_Init();
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
    peripheralPrintf(PERIPHERAL_USB, "Start  \r\n");
  }
  /* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */


/**
  * @brief  Function implementing the Printf for COM
  * @param  argument: Not used
  * @retval None
*/
  void peripheralPrintf(uint16_t peripheral, char *format, ...)
  {
  	char buffer[64];

  	va_list args;
  	va_start(args, format);
  	vsprintf(buffer, format, args);
  	va_end(args);

  	switch(peripheral)
  	{
  	case PERIPHERAL_USART:
  		// TODO:
  		break;
  	case PERIPHERAL_USB:
  		USB_TransmitBuffer((uint8_t *)buffer, strlen(buffer));
  		break;
  	default:
  		break;
  	}
  }

/**
  * @brief  Function implementing the AccRead thread.
  * @param  argument: Not used
  * @retval None
*/
void StartAccRead(void const * argument)
{
	int16_t data[3]={0,0,0};
	 for(;;)
	  {
		 BSP_ACCELERO_GetXYZ(data);  // lê os valores do acc
		 //fazer qualquer coisa
	  }

}

/**
  * @brief  Function implementing the TempRead thread.
  * @param  argument: Not used
  * @retval None
*/
void StartTempRead(void const * argument)
{


	 if((HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) ||  entrou==true)
	  {
		  entrou=true;
		  adc_value=HAL_ADC_GetValue(&hadc1);
		  peripheralPrintf(PERIPHERAL_USB,"%d",adc_value);

		  myPIDSetpoint=  USB_ReceiveString();
		  //peripheralPrintf(PERIPHERAL_USB,"%d",setpoint);

		  myPID->myInput= adc_value;
		  PID_Compute(myPID);
		  //myPID->myOutput=HAL_GPIO_WritePin();

		  HAL_ADC_Stop(&hadc1);
	  }
	  else
	  {
		  adc_value=0;
		  peripheralPrintf(PERIPHERAL_USB,"problems with Temp Sensor\n");
	  }

	  peripheralPrintf(PERIPHERAL_USB, "read temp stop\n");
	  HAL_Delay(100);



}


     
/* USER CODE END Application */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
